From 1b9189f1aecf65f2ab73b5e26a1707e11c7d1926 Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@wine-staging.com>
Date: Sat, 12 Dec 2020 17:28:31 -0700
Subject: [PATCH] kernel32: Advertise junction point support.

---
 dlls/mountmgr.sys/device.c | 80 +++++++++++++++++++++++++++++++++++++-
 dlls/ntdll/tests/file.c    |  9 ++++-
 2 files changed, 86 insertions(+), 3 deletions(-)

diff --git a/dlls/mountmgr.sys/device.c b/dlls/mountmgr.sys/device.c
index dd2c7d70759..171dc6ea592 100644
--- a/dlls/mountmgr.sys/device.c
+++ b/dlls/mountmgr.sys/device.c
@@ -31,6 +31,21 @@
 #ifdef HAVE_SYS_IOCTL_H
 # include <sys/ioctl.h>
 #endif
+#ifdef HAVE_SYS_STATFS_H
+# include <sys/statfs.h>
+#endif
+#ifdef HAVE_SYS_SYSCALL_H
+# include <sys/syscall.h>
+#endif
+#ifdef HAVE_SYS_VFS_H
+# include <sys/vfs.h>
+#endif
+#ifdef HAVE_SYS_PARAM_H
+#include <sys/param.h>
+#endif
+#ifdef HAVE_SYS_MOUNT_H
+#include <sys/mount.h>
+#endif
 
 #define NONAMELESSUNION
 
@@ -1828,6 +1843,68 @@ static NTSTATUS query_property( struct disk_device *device, IRP *irp )
     return status;
 }
 
+static DWORD get_fs_flags( struct volume *volume )
+{
+#if defined(__NR_renameat2) || defined(RENAME_SWAP)
+#if defined(HAVE_FSTATFS)
+    struct statfs stfs;
+#elif defined(HAVE_FSTATVFS)
+    struct statvfs stfs;
+#endif
+    int fd;
+
+    if ((fd = open_volume_file( volume, "" )) == -1)
+        return 0;
+#if defined(HAVE_FSTATFS)
+    if (fstatfs(fd, &stfs))
+        return 0;
+#elif defined(HAVE_FSTATVFS)
+    if (fstatvfs(fd, &stfs))
+        return 0;
+#endif
+    close( fd );
+#if defined(HAVE_FSTATFS) && defined(linux)
+    switch (stfs.f_type)
+    {
+    case 0x6969:      /* nfs */
+    case 0xff534d42:  /* cifs */
+    case 0x564c:      /* ncpfs */
+    case 0x01021994:  /* tmpfs */
+    case 0x28cd3d45:  /* cramfs */
+    case 0x1373:      /* devfs */
+    case 0x9fa0:      /* procfs */
+    case 0xef51:      /* old ext2 */
+    case 0xef53:      /* ext2/3/4 */
+    case 0x4244:      /* hfs */
+    case 0xf995e849:  /* hpfs */
+    case 0x5346544e:  /* ntfs */
+        return FILE_SUPPORTS_REPARSE_POINTS;
+    default:
+        break;
+    }
+#elif defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__OpenBSD__) || defined(__DragonFly__) || defined(__APPLE__) || defined(__NetBSD__)
+    if (!strcmp("apfs", stfs.f_fstypename) ||
+        !strcmp("nfs", stfs.f_fstypename) ||
+        !strcmp("cifs", stfs.f_fstypename) ||
+        !strcmp("ncpfs", stfs.f_fstypename) ||
+        !strcmp("tmpfs", stfs.f_fstypename) ||
+        !strcmp("cramfs", stfs.f_fstypename) ||
+        !strcmp("devfs", stfs.f_fstypename) ||
+        !strcmp("procfs", stfs.f_fstypename) ||
+        !strcmp("ext2", stfs.f_fstypename) ||
+        !strcmp("ext3", stfs.f_fstypename) ||
+        !strcmp("ext4", stfs.f_fstypename) ||
+        !strcmp("hfs", stfs.f_fstypename) ||
+        !strcmp("hpfs", stfs.f_fstypename) ||
+        !strcmp("ntfs", stfs.f_fstypename))
+    {
+        return FILE_SUPPORTS_REPARSE_POINTS;
+    }
+#endif
+#endif
+    return 0;
+}
+
 static NTSTATUS WINAPI harddisk_query_volume( DEVICE_OBJECT *device, IRP *irp )
 {
     IO_STACK_LOCATION *irpsp = IoGetCurrentIrpStackLocation( irp );
@@ -1916,7 +1993,8 @@ static NTSTATUS WINAPI harddisk_query_volume( DEVICE_OBJECT *device, IRP *irp )
             memcpy(info->FileSystemName, fat32W, info->FileSystemNameLength);
             break;
         default:
-            info->FileSystemAttributes = FILE_CASE_PRESERVED_NAMES | FILE_PERSISTENT_ACLS;
+            info->FileSystemAttributes = FILE_CASE_PRESERVED_NAMES | FILE_PERSISTENT_ACLS
+                                         | get_fs_flags( volume );
             info->MaximumComponentNameLength = 255;
             info->FileSystemNameLength = min( sizeof(ntfsW), length - offsetof( FILE_FS_ATTRIBUTE_INFORMATION, FileSystemName ) );
             memcpy(info->FileSystemName, ntfsW, info->FileSystemNameLength);
diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
index 5a2ac2114b0..5882793c883 100644
--- a/dlls/ntdll/tests/file.c
+++ b/dlls/ntdll/tests/file.c
@@ -5181,8 +5181,8 @@ static INT build_reparse_buffer(const WCHAR *filename, REPARSE_DATA_BUFFER **pbu
 
 static void test_reparse_points(void)
 {
+    WCHAR path[MAX_PATH], reparse_path[MAX_PATH], target_path[MAX_PATH], volnameW[MAX_PATH];
     static const WCHAR reparseW[] = {'\\','r','e','p','a','r','s','e',0};
-    WCHAR path[MAX_PATH], reparse_path[MAX_PATH], target_path[MAX_PATH];
     static const WCHAR targetW[] = {'\\','t','a','r','g','e','t',0};
     FILE_BASIC_INFORMATION old_attrib, new_attrib;
     static const WCHAR fooW[] = {'f','o','o',0};
@@ -5211,7 +5211,12 @@ static void test_reparse_points(void)
     pRtlDosPathNameToNtPathName_U(path, &nameW, NULL, NULL);
     volW[0] = nameW.Buffer[4];
     pRtlFreeUnicodeString( &nameW );
-    GetVolumeInformationW(volW, 0, 0, 0, &dwLen, &dwFlags, 0, 0);
+    if (!GetVolumeNameForVolumeMountPointW(volW, volnameW, MAX_PATH))
+    {
+        win_skip("Failed to obtain volume name for current volume.\n");
+        return;
+    }
+    GetVolumeInformationW(volnameW, 0, 0, 0, &dwLen, &dwFlags, 0, 0);
     if (!(dwFlags & FILE_SUPPORTS_REPARSE_POINTS))
     {
         skip("File system does not support reparse points.\n");
-- 
2.20.1

