From 680c7575c78c63e8bc8e971d8f1385175bf5f106 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 12 Oct 2020 23:23:18 +0200
Subject: [PATCH] widl: Support partially specialized parameterized type.

This allows parameterized types to reference each other with a different
set of parameters. This is required for instance for IIterable<T>, that
needs to reference IIterator<T>.

The partial specialization is recorded by adding a new parameterized
type, referencing the original one as its template. The parameterized
type chain will be resolved all at once when the type is declared.
---
 include/windows.foundation.idl |  9 ++++++++
 tools/widl/parser.y            | 35 +++++++++++++++++++++++++++++
 tools/widl/typetree.c          | 41 +++++++++++++++++++++++++++++++---
 tools/widl/typetree.h          |  2 ++
 tools/widl/widltypes.h         |  1 +
 5 files changed, 85 insertions(+), 3 deletions(-)

diff --git a/include/windows.foundation.idl b/include/windows.foundation.idl
index ab7c4753c3b..5f7a49c38e4 100644
--- a/include/windows.foundation.idl
+++ b/include/windows.foundation.idl
@@ -127,6 +127,15 @@ namespace Windows {
                 HRESULT GetMany([in] UINT32 count, [out] T *items, [out, retval] UINT32 *value);
             }
 
+            [
+                contract(Windows.Foundation.FoundationContract, 1.0),
+                uuid(faa585ea-6214-4217-afda-7f46de5869b3)
+            ]
+            interface IIterable<T> : IInspectable
+            {
+                HRESULT First([out, retval] Windows.Foundation.Collections.IIterator<T> **value);
+            }
+
             [
                 contract(Windows.Foundation.FoundationContract, 1.0),
                 uuid(bbe1fa4c-b0e3-4583-baef-1f1b2e483e56)
diff --git a/tools/widl/parser.y b/tools/widl/parser.y
index 9083df8cf27..61bbe2a50ee 100644
--- a/tools/widl/parser.y
+++ b/tools/widl/parser.y
@@ -302,6 +302,8 @@ static typelib_t *current_typelib;
 %type <type> type qualified_type
 %type <type> type_parameter
 %type <typelist> type_parameters
+%type <type> parameterized_type
+%type <typelist> parameterized_types
 %type <typelist> requires required_types
 %type <ifref> class_interface
 %type <ifref_list> class_interfaces
@@ -912,6 +914,20 @@ qualified_type:
 	| namespace_pfx aKNOWNTYPE		{ $$ = find_qualified_type_or_error($2, 0); }
 	;
 
+parameterized_type: qualified_type '<' parameterized_types '>'
+						{ $$ = find_parameterized_type($1, $3, 0); }
+	;
+
+parameterized_types:
+	  base_type				{ $$ = append_type(NULL, $1); }
+	| qualified_type			{ $$ = append_type(NULL, $1); }
+	| qualified_type '*'			{ $$ = append_type(NULL, type_new_pointer($1)); }
+	| parameterized_type			{ $$ = append_type(NULL, $1); }
+	| parameterized_type '*'		{ $$ = append_type(NULL, type_new_pointer($1)); }
+	| parameterized_types ',' parameterized_types
+						{ $$ = append_types($1, $3); }
+	;
+
 coclass:  tCOCLASS aIDENTIFIER			{ $$ = type_new_coclass($2); }
 	| tCOCLASS aKNOWNTYPE			{ $$ = find_type($2, NULL, 0);
 						  if (type_get_type_detect_alias($$) != TYPE_COCLASS)
@@ -1004,6 +1020,7 @@ dispinterfacedef: dispinterfacehdr '{'
 
 inherit:					{ $$ = NULL; }
 	| ':' qualified_type                    { $$ = $2; }
+	| ':' parameterized_type		{ $$ = $2; }
 	;
 
 interface: tINTERFACE aIDENTIFIER		{ $$ = get_type(TYPE_INTERFACE, $2, current_namespace, 0); }
@@ -1030,6 +1047,7 @@ type_parameters:
 
 required_types:
 	  qualified_type			{ $$ = append_type(NULL, $1); }
+	| parameterized_type			{ $$ = append_type(NULL, $1); }
 	| required_types ',' required_types	{ $$ = append_types($1, $3); }
 
 requires:					{ $$ = NULL; }
@@ -1251,6 +1269,7 @@ structdef: tSTRUCT t_ident '{' fields '}'	{ $$ = type_new_struct($2, current_nam
 
 type:	  tVOID					{ $$ = type_new_void(); }
 	| qualified_type                        { $$ = $1; }
+	| parameterized_type			{ $$ = $1; }
 	| base_type				{ $$ = $1; }
 	| enumdef				{ $$ = $1; }
 	| tENUM aIDENTIFIER			{ $$ = type_new_enum($2, current_namespace, FALSE, NULL); }
@@ -3369,3 +3388,19 @@ static void check_def(const type_t *t)
         error_loc("%s: redefinition error; original definition was at %s:%d\n",
                   t->name, t->loc_info.input_name, t->loc_info.line_number);
 }
+
+type_t *find_parameterized_type(type_t *type, type_list_t *params, int t)
+{
+    char *name = format_parameterized_type_name(type, params);
+
+    if (parameters_namespace)
+    {
+        assert(type->type_type == TYPE_PARAMETERIZED_TYPE);
+        type = type_parameterized_type_specialize_partial(type, params);
+    }
+    /* FIXME: If not in another parameterized type, we'll have to look for the declared specialization. */
+    else error_loc("parameterized type '%s' not declared\n", name);
+
+    free(name);
+    return type;
+}
diff --git a/tools/widl/typetree.c b/tools/widl/typetree.c
index 95c04c245b8..d2c472fcca0 100644
--- a/tools/widl/typetree.c
+++ b/tools/widl/typetree.c
@@ -100,13 +100,40 @@ static size_t append_namespace(char **buf, size_t *len, size_t pos, struct names
     return n;
 }
 
+static size_t append_namespaces(char **buf, size_t *len, size_t pos, struct namespace *namespace, const char *prefix,
+                                const char *separator, const char *suffix, const char *abi_prefix)
+{
+    size_t n = 0;
+    n += strappend(buf, len, pos + n, "%s", prefix);
+    n += append_namespace(buf, len, pos + n, namespace, separator, abi_prefix);
+    n += strappend(buf, len, pos + n, "%s", suffix);
+    return n;
+}
+
 char *format_namespace(struct namespace *namespace, const char *prefix, const char *separator, const char *suffix, const char *abi_prefix)
+{
+    size_t len = 0;
+    char *buf = NULL;
+    append_namespaces(&buf, &len, 0, namespace, prefix, separator, suffix, abi_prefix);
+    return buf;
+}
+
+char *format_parameterized_type_name(type_t *type, type_list_t *params)
 {
     size_t len = 0, pos = 0;
     char *buf = NULL;
-    pos += strappend(&buf, &len, pos, "%s", prefix);
-    pos += append_namespace(&buf, &len, pos, namespace, separator, abi_prefix);
-    pos += strappend(&buf, &len, pos, "%s", suffix);
+    type_list_t *entry;
+
+    pos += strappend(&buf, &len, pos, "%s<", type->name);
+    for (entry = params; entry; entry = entry->next)
+    {
+        for (type = entry->type; type->type_type == TYPE_POINTER; type = type_pointer_get_ref_type(type)) {}
+        pos += append_namespaces(&buf, &len, pos, type->namespace, "", "::", type->name, use_abi_namespace ? "ABI" : NULL);
+        for (type = entry->type; type->type_type == TYPE_POINTER; type = type_pointer_get_ref_type(type)) pos += strappend(&buf, &len, pos, "*");
+        if (entry->next) pos += strappend(&buf, &len, pos, ",");
+    }
+    pos += strappend(&buf, &len, pos, ">");
+
     return buf;
 }
 
@@ -447,6 +474,14 @@ static unsigned int compute_method_indexes(type_t *iface)
     return idx;
 }
 
+type_t *type_parameterized_type_specialize_partial(type_t *type, type_list_t *params)
+{
+    type_t *new_type = duptype(type, 0);
+    new_type->details.parameterized.type = type;
+    new_type->details.parameterized.params = params;
+    return new_type;
+}
+
 void type_parameterized_interface_declare(type_t *type, type_list_t *params)
 {
     type_t *iface = make_type(TYPE_INTERFACE);
diff --git a/tools/widl/typetree.h b/tools/widl/typetree.h
index 79c5a01ce3a..c46a2629467 100644
--- a/tools/widl/typetree.h
+++ b/tools/widl/typetree.h
@@ -45,6 +45,8 @@ type_t *type_new_nonencapsulated_union(const char *name, int defined, var_list_t
 type_t *type_new_encapsulated_union(char *name, var_t *switch_field, var_t *union_field, var_list_t *cases);
 type_t *type_new_bitfield(type_t *field_type, const expr_t *bits);
 type_t *type_new_runtimeclass(char *name, struct namespace *namespace);
+type_t *type_parameterized_type_specialize_partial(type_t *type, type_list_t *params);
+type_t *find_parameterized_type(type_t *type, type_list_t *params, int t);
 void type_parameterized_interface_declare(type_t *type, type_list_t *params);
 void type_parameterized_interface_define(type_t *type, type_list_t *params, type_t *inherit, statement_list_t *stmts);
 void type_interface_define(type_t *iface, type_t *inherit, statement_list_t *stmts, type_list_t *requires);
diff --git a/tools/widl/widltypes.h b/tools/widl/widltypes.h
index 2c0ac4003ce..be82342e31a 100644
--- a/tools/widl/widltypes.h
+++ b/tools/widl/widltypes.h
@@ -650,6 +650,7 @@ void init_loc_info(loc_info_t *);
 
 char *format_namespace(struct namespace *namespace, const char *prefix, const char *separator, const char *suffix,
                        const char *abi_prefix);
+char *format_parameterized_type_name(type_t *type, type_list_t *params);
 
 static inline enum type_type type_get_type_detect_alias(const type_t *type)
 {
-- 
2.29.2

