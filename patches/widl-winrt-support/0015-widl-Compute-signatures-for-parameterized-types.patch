From 466bf2736d778fdc23bdcb338c00fac0aa80c1b3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 1 Dec 2020 17:44:43 +0100
Subject: [PATCH] widl: Compute signatures for parameterized types.

---
 tools/widl/typetree.c  | 151 +++++++++++++++++++++++++++++++++++++++++
 tools/widl/typetree.h  |  10 +++
 tools/widl/widltypes.h |   2 +
 3 files changed, 163 insertions(+)

diff --git a/tools/widl/typetree.c b/tools/widl/typetree.c
index 6a30891f656..74ee92ed094 100644
--- a/tools/widl/typetree.c
+++ b/tools/widl/typetree.c
@@ -49,6 +49,7 @@ type_t *make_type(enum type_type type)
     t->type_type = type;
     t->attrs = NULL;
     t->c_name = NULL;
+    t->signature = NULL;
     memset(&t->details, 0, sizeof(t->details));
     t->typestring_offset = 0;
     t->ptrdesc = 0;
@@ -110,6 +111,125 @@ static size_t append_namespaces(char **buf, size_t *len, size_t pos, struct name
     return n;
 }
 
+static size_t append_type_signature(char **buf, size_t *len, size_t pos, type_t *type);
+
+static size_t append_var_list_signature(char **buf, size_t *len, size_t pos, var_list_t *var_list)
+{
+    var_t *var;
+    size_t n = 0;
+    if (!var_list) n += strappend(buf, len, pos + n, ";");
+    else LIST_FOR_EACH_ENTRY(var, var_list, var_t, entry)
+    {
+        n += strappend(buf, len, pos + n, ";");
+        n += append_type_signature(buf, len, pos + n, var->declspec.type);
+    }
+    return n;
+}
+
+static size_t append_type_signature(char **buf, size_t *len, size_t pos, type_t *type)
+{
+    const GUID *uuid;
+    size_t n = 0;
+    if (!type) return 0;
+    switch (type->type_type)
+    {
+    case TYPE_INTERFACE:
+        if (type->signature) n += strappend(buf, len, pos + n, "%s", type->signature);
+        else
+        {
+             uuid = type_get_uuid(type);
+             n += strappend(buf, len, pos + n, "{%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x}",
+                            uuid->Data1, uuid->Data2, uuid->Data3,
+                            uuid->Data4[0], uuid->Data4[1], uuid->Data4[2], uuid->Data4[3],
+                            uuid->Data4[4], uuid->Data4[5], uuid->Data4[6], uuid->Data4[7]);
+        }
+        return n;
+    case TYPE_DELEGATE:
+        n += strappend(buf, len, pos + n, "delegate(");
+        n += append_type_signature(buf, len, pos + n, type_delegate_get_iface(type));
+        n += strappend(buf, len, pos + n, ")");
+        return n;
+    case TYPE_RUNTIMECLASS:
+        n += strappend(buf, len, pos + n, "rc(");
+        n += append_namespaces(buf, len, pos + n, type->namespace, "", ".", type->name, NULL);
+        n += strappend(buf, len, pos + n, ";");
+        n += append_type_signature(buf, len, pos + n, type_runtimeclass_get_default_iface(type));
+        n += strappend(buf, len, pos + n, ")");
+        return n;
+    case TYPE_POINTER:
+        n += append_type_signature(buf, len, pos + n, type->details.pointer.ref.type);
+        return n;
+    case TYPE_ALIAS:
+        if (!strcmp(type->name, "boolean")) n += strappend(buf, len, pos + n, "b1");
+        else n += append_type_signature(buf, len, pos + n, type->details.alias.aliasee.type);
+        return n;
+    case TYPE_STRUCT:
+        n += strappend(buf, len, pos + n, "struct(");
+        n += append_namespaces(buf, len, pos + n, type->namespace, "", ".", type->name, NULL);
+        n += append_var_list_signature(buf, len, pos + n, type->details.structure->fields);
+        n += strappend(buf, len, pos + n, ")");
+        return n;
+    case TYPE_BASIC:
+        switch (type_basic_get_type(type))
+        {
+        case TYPE_BASIC_INT:
+        case TYPE_BASIC_INT32:
+            n += strappend(buf, len, pos + n, type_basic_get_sign(type) < 0 ? "i4" : "u4");
+            return n;
+        case TYPE_BASIC_INT64:
+            n += strappend(buf, len, pos + n, type_basic_get_sign(type) < 0 ? "i8" : "u8");
+            return n;
+        case TYPE_BASIC_INT8:
+            assert(type_basic_get_sign(type) >= 0); /* signature string for signed char isn't specified */
+            n += strappend(buf, len, pos + n, "u1");
+            return n;
+        case TYPE_BASIC_FLOAT:
+            n += strappend(buf, len, pos + n, "f4");
+            return n;
+        case TYPE_BASIC_DOUBLE:
+            n += strappend(buf, len, pos + n, "f8");
+            return n;
+        case TYPE_BASIC_INT16:
+        case TYPE_BASIC_INT3264:
+        case TYPE_BASIC_LONG:
+        case TYPE_BASIC_CHAR:
+        case TYPE_BASIC_HYPER:
+        case TYPE_BASIC_BYTE:
+        case TYPE_BASIC_WCHAR:
+        case TYPE_BASIC_ERROR_STATUS_T:
+        case TYPE_BASIC_HANDLE:
+            error("basic type '%d' signature not implemented\n", type_basic_get_type(type));
+            assert(0); /* FIXME: implement when needed */
+            break;
+        }
+    case TYPE_ENUM:
+        n += strappend(buf, len, pos + n, "enum(");
+        n += append_namespaces(buf, len, pos + n, type->namespace, "", ".", type->name, NULL);
+        if (is_attr(type->attrs, ATTR_FLAGS)) n += strappend(buf, len, pos + n, ";u4");
+        else n += strappend(buf, len, pos + n, ";i4");
+        n += strappend(buf, len, pos + n, ")");
+        return n;
+    case TYPE_ARRAY:
+    case TYPE_ENCAPSULATED_UNION:
+    case TYPE_UNION:
+    case TYPE_COCLASS:
+        error("type '%d' signature for '%s' not implemented\n", type->type_type, type->name);
+        assert(0); /* FIXME: implement when needed */
+        break;
+    case TYPE_VOID:
+    case TYPE_FUNCTION:
+    case TYPE_BITFIELD:
+    case TYPE_MODULE:
+    case TYPE_PARAMETERIZED_TYPE:
+    case TYPE_PARAMETER:
+    case TYPE_APICONTRACT:
+        assert(0); /* should not be there */
+        break;
+    }
+
+    return n;
+}
+
 char *format_namespace(struct namespace *namespace, const char *prefix, const char *separator, const char *suffix, const char *abi_prefix)
 {
     size_t len = 0;
@@ -137,6 +257,14 @@ char *format_parameterized_type_name(type_t *type, type_list_t *params)
     return buf;
 }
 
+char *format_type_signature(type_t *type)
+{
+    size_t len = 0;
+    char *buf = NULL;
+    append_type_signature(&buf, &len, 0, type);
+    return buf;
+}
+
 static char const *parameterized_type_shorthands[][2] = {
     {"Windows_CFoundation_CCollections_C", "__F"},
     {"Windows_CFoundation_C", "__F"},
@@ -172,6 +300,27 @@ static char *format_parameterized_type_c_name(type_t *type, type_list_t *params,
     return buf;
 }
 
+static char *format_parameterized_type_signature(type_t *type, type_list_t *params)
+{
+    size_t len = 0, pos = 0;
+    char *buf = NULL;
+    type_list_t *entry;
+
+    const GUID *uuid = type_get_uuid(type);
+    pos += strappend(&buf, &len, pos, "pinterface({%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x}",
+                     uuid->Data1, uuid->Data2, uuid->Data3,
+                     uuid->Data4[0], uuid->Data4[1], uuid->Data4[2], uuid->Data4[3],
+                     uuid->Data4[4], uuid->Data4[5], uuid->Data4[6], uuid->Data4[7]);
+    for (entry = params; entry; entry = entry->next)
+    {
+        pos += strappend(&buf, &len, pos, ";");
+        pos += append_type_signature(&buf, &len, pos, entry->type);
+    }
+    pos += strappend(&buf, &len, pos, ")");
+
+    return buf;
+}
+
 type_t *type_new_function(var_list_t *args)
 {
     var_t *arg;
@@ -738,10 +887,12 @@ type_t *type_parameterized_type_specialize_define(type_t *type, type_list_t *par
         return NULL;
     }
 
+    iface->signature = format_parameterized_type_signature(type, params);
     iface->defined = TRUE;
     if (iface->type_type == TYPE_DELEGATE)
     {
         iface = iface->details.delegate.iface;
+        iface->signature = format_parameterized_type_signature(type, params);
         iface->defined = TRUE;
     }
     compute_method_indexes(iface);
diff --git a/tools/widl/typetree.h b/tools/widl/typetree.h
index e354259ab18..4d705a060f3 100644
--- a/tools/widl/typetree.h
+++ b/tools/widl/typetree.h
@@ -81,6 +81,16 @@ static inline enum type_type type_get_type(const type_t *type)
     return type_get_type_detect_alias(type_get_real_type(type));
 }
 
+static inline const GUID *type_get_uuid(const type_t *type)
+{
+    static const GUID empty;
+    attr_t *attr;
+    LIST_FOR_EACH_ENTRY(attr, type->attrs, attr_t, entry)
+        if (attr->type == ATTR_UUID) return attr->u.pval;
+    error("type '%s' uuid not found\n", type->name);
+    return &empty;
+}
+
 static inline enum type_basic_type type_basic_get_type(const type_t *type)
 {
     type = type_get_real_type(type);
diff --git a/tools/widl/widltypes.h b/tools/widl/widltypes.h
index d55922b72e9..a1fce0ef87d 100644
--- a/tools/widl/widltypes.h
+++ b/tools/widl/widltypes.h
@@ -503,6 +503,7 @@ struct _type_t {
     struct delegate_details delegate;
   } details;
   const char *c_name;
+  const char *signature;
   unsigned int typestring_offset;
   unsigned int ptrdesc;           /* used for complex structs */
   int typelib_idx;
@@ -658,6 +659,7 @@ void init_loc_info(loc_info_t *);
 char *format_namespace(struct namespace *namespace, const char *prefix, const char *separator, const char *suffix,
                        const char *abi_prefix);
 char *format_parameterized_type_name(type_t *type, type_list_t *params);
+char *format_type_signature(type_t *type);
 
 static inline enum type_type type_get_type_detect_alias(const type_t *type)
 {
-- 
2.29.2

