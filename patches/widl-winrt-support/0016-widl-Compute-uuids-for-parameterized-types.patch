From 9d5f825326a9e00db5eacbc0beeafbcb4bea85ee Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 28 Sep 2020 17:00:41 +0200
Subject: [PATCH] widl: Compute uuids for parameterized types.

---
 tools/widl/hash.c     | 178 ++++++++++++++++++++++++++++++++++++++++++
 tools/widl/hash.h     |  14 ++++
 tools/widl/typetree.c |  53 +++++++++++++
 tools/widl/typetree.h |   2 +-
 4 files changed, 246 insertions(+), 1 deletion(-)

diff --git a/tools/widl/hash.c b/tools/widl/hash.c
index 15ec88001d6..df6133866e0 100644
--- a/tools/widl/hash.c
+++ b/tools/widl/hash.c
@@ -639,3 +639,181 @@ unsigned int lhash_val_of_name_sys( syskind_t skind, LCID lcid, LPCSTR lpStr)
 
   return nHiWord | nLoWord;
 }
+
+/* SHA1 algorithm
+ *
+ * Based on public domain SHA code by Steve Reid <steve@edmweb.com>
+ */
+
+#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))
+/* FIXME: This definition of DWORD2BE is little endian specific! */
+#define DWORD2BE(x) (((x) >> 24) & 0xff) | (((x) >> 8) & 0xff00) | (((x) << 8) & 0xff0000) | (((x) << 24) & 0xff000000);
+/* FIXME: This definition of blk0 is little endian specific! */
+#define blk0(i) (Block[i] = (rol(Block[i],24)&0xFF00FF00)|(rol(Block[i],8)&0x00FF00FF))
+#define blk1(i) (Block[i&15] = rol(Block[(i+13)&15]^Block[(i+8)&15]^Block[(i+2)&15]^Block[i&15],1))
+#define f1(x,y,z) (z^(x&(y^z)))
+#define f2(x,y,z) (x^y^z)
+#define f3(x,y,z) ((x&y)|(z&(x|y)))
+#define f4(x,y,z) (x^y^z)
+/* (R0+R1), R2, R3, R4 are the different operations used in SHA1 */
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+0x5A827999+rol(v,5);w=rol(w,30);
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y)+blk1(i)+0x5A827999+rol(v,5);w=rol(w,30);
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y)+blk1(i)+0x6ED9EBA1+rol(v,5);w=rol(w,30);
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y)+blk1(i)+0x8F1BBCDC+rol(v,5);w=rol(w,30);
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y)+blk1(i)+0xCA62C1D6+rol(v,5);w=rol(w,30);
+
+/* Hash a single 512-bit block. This is the core of the algorithm. */
+static void SHA1Transform(ULONG State[5], UCHAR Buffer[64])
+{
+   ULONG a, b, c, d, e;
+   ULONG *Block;
+
+   Block = (ULONG*)Buffer;
+
+   /* Copy Context->State[] to working variables */
+   a = State[0];
+   b = State[1];
+   c = State[2];
+   d = State[3];
+   e = State[4];
+
+   /* 4 rounds of 20 operations each. Loop unrolled. */
+   R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
+   R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
+   R0(c,d,e,a,b, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);
+   R0(d,e,a,b,c,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);
+   R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
+   R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
+   R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
+   R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
+   R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
+   R2(e,a,b,c,d,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);
+   R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
+   R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
+   R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
+   R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
+   R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
+   R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
+   R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
+   R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
+   R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
+   R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
+
+   /* Add the working variables back into Context->State[] */
+   State[0] += a;
+   State[1] += b;
+   State[2] += c;
+   State[3] += d;
+   State[4] += e;
+
+   /* Wipe variables */
+   a = b = c = d = e = 0;
+}
+
+
+/******************************************************************************
+ * A_SHAInit (ntdll.@)
+ *
+ * Initialize a SHA context structure.
+ *
+ * PARAMS
+ *  Context [O] SHA context
+ *
+ * RETURNS
+ *  Nothing
+ */
+void A_SHAInit(SHA_CTX *Context)
+{
+   /* SHA1 initialization constants */
+   Context->State[0] = 0x67452301;
+   Context->State[1] = 0xEFCDAB89;
+   Context->State[2] = 0x98BADCFE;
+   Context->State[3] = 0x10325476;
+   Context->State[4] = 0xC3D2E1F0;
+   Context->Count[0] =
+   Context->Count[1] = 0;
+}
+
+/******************************************************************************
+ * A_SHAUpdate (ntdll.@)
+ *
+ * Update a SHA context with a hashed data from supplied buffer.
+ *
+ * PARAMS
+ *  Context    [O] SHA context
+ *  Buffer     [I] hashed data
+ *  BufferSize [I] hashed data size
+ *
+ * RETURNS
+ *  Nothing
+ */
+void A_SHAUpdate(SHA_CTX *Context, const unsigned char *Buffer, UINT BufferSize)
+{
+   ULONG BufferContentSize;
+
+   BufferContentSize = Context->Count[1] & 63;
+   Context->Count[1] += BufferSize;
+   if (Context->Count[1] < BufferSize)
+      Context->Count[0]++;
+   Context->Count[0] += (BufferSize >> 29);
+
+   if (BufferContentSize + BufferSize < 64)
+   {
+      RtlCopyMemory(&Context->Buffer[BufferContentSize], Buffer,
+                    BufferSize);
+   }
+   else
+   {
+      while (BufferContentSize + BufferSize >= 64)
+      {
+         RtlCopyMemory(Context->Buffer + BufferContentSize, Buffer,
+                       64 - BufferContentSize);
+         Buffer += 64 - BufferContentSize;
+         BufferSize -= 64 - BufferContentSize;
+         SHA1Transform(Context->State, Context->Buffer);
+         BufferContentSize = 0;
+      }
+      RtlCopyMemory(Context->Buffer + BufferContentSize, Buffer, BufferSize);
+   }
+}
+
+/******************************************************************************
+ * A_SHAFinal (ntdll.@)
+ *
+ * Finalize SHA context and return the resulting hash.
+ *
+ * PARAMS
+ *  Context [I/O] SHA context
+ *  Result  [O] resulting hash
+ *
+ * RETURNS
+ *  Nothing
+ */
+void A_SHAFinal(SHA_CTX *Context, PULONG Result)
+{
+   INT Pad, Index;
+   UCHAR Buffer[72];
+   ULONG *Count;
+   ULONG BufferContentSize, LengthHi, LengthLo;
+
+   BufferContentSize = Context->Count[1] & 63;
+   if (BufferContentSize >= 56)
+      Pad = 56 + 64 - BufferContentSize;
+   else
+      Pad = 56 - BufferContentSize;
+
+   LengthHi = (Context->Count[0] << 3) | (Context->Count[1] >> (32 - 3));
+   LengthLo = (Context->Count[1] << 3);
+
+   RtlZeroMemory(Buffer + 1, Pad - 1);
+   Buffer[0] = 0x80;
+   Count = (ULONG*)(Buffer + Pad);
+   Count[0] = DWORD2BE(LengthHi);
+   Count[1] = DWORD2BE(LengthLo);
+   A_SHAUpdate(Context, Buffer, Pad + 8);
+
+   for (Index = 0; Index < 5; Index++)
+      Result[Index] = DWORD2BE(Context->State[Index]);
+
+   A_SHAInit(Context);
+}
diff --git a/tools/widl/hash.h b/tools/widl/hash.h
index 3c2fd2914bf..208b193ac87 100644
--- a/tools/widl/hash.h
+++ b/tools/widl/hash.h
@@ -22,6 +22,20 @@
 #ifndef __WIDL_HASH_H
 #define __WIDL_HASH_H
 
+#include "windef.h"
+
 extern unsigned int lhash_val_of_name_sys( syskind_t skind, LCID lcid, LPCSTR lpStr);
 
+typedef struct
+{
+   ULONG Unknown[6];
+   ULONG State[5];
+   ULONG Count[2];
+   UCHAR Buffer[64];
+} SHA_CTX;
+
+VOID A_SHAInit(SHA_CTX *ctx);
+VOID A_SHAUpdate(SHA_CTX *ctx, const UCHAR *buffer, UINT size);
+VOID A_SHAFinal(SHA_CTX *ctx, PULONG result);
+
 #endif
diff --git a/tools/widl/typetree.c b/tools/widl/typetree.c
index 74ee92ed094..4002b9d62ae 100644
--- a/tools/widl/typetree.c
+++ b/tools/widl/typetree.c
@@ -29,6 +29,7 @@
 #include "parser.h"
 #include "typetree.h"
 #include "header.h"
+#include "hash.h"
 
 type_t *duptype(type_t *t, int dupname)
 {
@@ -667,6 +668,57 @@ static void compute_delegate_iface_names(type_t *delegate, type_t *type, type_li
     else iface->c_name = format_namespace(delegate->namespace, "__x_", "_C", iface->name, use_abi_namespace ? "ABI" : NULL);
 }
 
+static void compute_interface_signature_uuid(type_t *iface)
+{
+    static unsigned char const wrt_pinterface_namespace[] = {0x11,0xf4,0x7a,0xd5,0x7b,0x73,0x42,0xc0,0xab,0xae,0x87,0x8b,0x1e,0x16,0xad,0xee};
+    static const int version = 5;
+    unsigned char hash[20];
+    SHA_CTX sha_ctx;
+    attr_t *attr;
+    GUID *uuid;
+
+    if (!iface->attrs)
+    {
+        iface->attrs = xmalloc( sizeof(*iface->attrs) );
+        list_init( iface->attrs );
+    }
+
+    LIST_FOR_EACH_ENTRY(attr, iface->attrs, attr_t, entry)
+        if (attr->type == ATTR_UUID) break;
+
+    if (&attr->entry == iface->attrs)
+    {
+        attr = xmalloc( sizeof(*attr) );
+        attr->type = ATTR_UUID;
+        attr->u.pval = xmalloc( sizeof(GUID) );
+        list_add_tail( iface->attrs, &attr->entry );
+    }
+
+    A_SHAInit(&sha_ctx);
+    A_SHAUpdate(&sha_ctx, wrt_pinterface_namespace, sizeof(wrt_pinterface_namespace));
+    A_SHAUpdate(&sha_ctx, (const UCHAR *)iface->signature, strlen(iface->signature));
+    A_SHAFinal(&sha_ctx, (ULONG *)hash);
+
+    /* https://tools.ietf.org/html/rfc4122:
+
+       * Set the four most significant bits (bits 12 through 15) of the
+         time_hi_and_version field to the appropriate 4-bit version number
+         from Section 4.1.3.
+
+       * Set the two most significant bits (bits 6 and 7) of the
+         clock_seq_hi_and_reserved to zero and one, respectively.
+    */
+
+    hash[6] = ((hash[6] & 0x0f) | (version << 4));
+    hash[8] = ((hash[8] & 0x3f) | 0x80);
+
+    uuid = attr->u.pval;
+    uuid->Data1 = ((DWORD)hash[0] << 24)|((DWORD)hash[1] << 16)|((DWORD)hash[2] << 8)|(DWORD)hash[3];
+    uuid->Data2 = ((WORD)hash[4] << 8)|(WORD)hash[5];
+    uuid->Data3 = ((WORD)hash[6] << 8)|(WORD)hash[7];
+    memcpy(&uuid->Data4, hash + 8, sizeof(*uuid) - offsetof(GUID, Data4));
+}
+
 static type_t *replace_type_parameters_in_type(type_t *type, type_list_t *orig, type_list_t *repl);
 
 static type_list_t *replace_type_parameters_in_type_list(type_list_t *type_list, type_list_t *orig, type_list_t *repl)
@@ -895,6 +947,7 @@ type_t *type_parameterized_type_specialize_define(type_t *type, type_list_t *par
         iface->signature = format_parameterized_type_signature(type, params);
         iface->defined = TRUE;
     }
+    compute_interface_signature_uuid(iface);
     compute_method_indexes(iface);
     return iface;
 }
diff --git a/tools/widl/typetree.h b/tools/widl/typetree.h
index 4d705a060f3..eefd79f139d 100644
--- a/tools/widl/typetree.h
+++ b/tools/widl/typetree.h
@@ -85,7 +85,7 @@ static inline const GUID *type_get_uuid(const type_t *type)
 {
     static const GUID empty;
     attr_t *attr;
-    LIST_FOR_EACH_ENTRY(attr, type->attrs, attr_t, entry)
+    if (type->attrs) LIST_FOR_EACH_ENTRY(attr, type->attrs, attr_t, entry)
         if (attr->type == ATTR_UUID) return attr->u.pval;
     error("type '%s' uuid not found\n", type->name);
     return &empty;
-- 
2.29.2

